//todo: complete Project Service, then UserService


//todo: read & implement these below code in later. ---------------------------------------------------------------
@ElementCollection // Allows tags to be stored as a collection of strings
    @CollectionTable(name = "project_tags", joinColumns = @JoinColumn(name = "project_id"))
    @Column(name = "tag")
    private List<String> tags = new ArrayList<>();

 @ManyToOne(fetch = FetchType.LAZY) // Use LAZY fetching to optimize performance
    @JoinColumn(name = "owner_id", nullable = false) // Specify foreign key column
    private User owner;

@ManyToMany
    @JoinTable(
        name = "project_team",
        joinColumns = @JoinColumn(name = "project_id"),
        inverseJoinColumns = @JoinColumn(name = "user_id")
    )
    private List<User> team = new ArrayList<>();

//todo: explanation for above code...
tags Field:

Added @ElementCollection with @CollectionTable to map the list of tags to a separate table (project_tags).
Ensures better database normalization and avoids serializing collections into a single column.
@ManyToOne Relationship with User:

Added @JoinColumn(name = "owner_id", nullable = false) to explicitly define the foreign key column.
Set fetch = FetchType.LAZY to optimize performance by loading the owner entity only when accessed.
@OneToOne Relationship with Chat:

No changes, but the @JsonIgnore annotation ensures chat details are not serialized in JSON responses unless explicitly needed.
@OneToMany Relationship with Issue:

Added @JsonIgnore to avoid potential recursion when serializing JSON (e.g., project -> issues -> project).
Ensures orphanRemoval to delete associated issues when a project is deleted.
@ManyToMany Relationship with User:

Added @JoinTable for clarity and customization of the join table (project_team) linking Project and User.
Avoided eager loading to prevent performance issues in cases of large teams.
Validation Enhancements:

Added @Column(nullable = false) for name to enforce mandatory input.
Increased the length of the description column to handle more detailed inputs.
Generated Table Schema

Table: project
Column	Type	Constraints
id	BIGINT	PRIMARY KEY
name	VARCHAR	NOT NULL
description	VARCHAR(1000)	NULLABLE
category	VARCHAR	NULLABLE
owner_id	BIGINT	FOREIGN KEY

Table: project_tags
Column	Type	Constraints
project_id	BIGINT	FOREIGN KEY
tag	VARCHAR	NOT NULL
Table: project_team
Column	Type	Constraints
project_id	BIGINT	FOREIGN KEY
user_id	BIGINT	FOREIGN KEY

Benefits of Updates
Normalization:
Moving tags to a separate table improves query flexibility and database normalization.
Performance:
Lazy fetching reduces unnecessary database calls for owner, chat, and team.
Readability:
Explicit @JoinColumn and @JoinTable annotations make the schema clearer.
Resilience:
Ensures proper cascading and orphan removal to maintain data integrity.
//todo---------------------------------------------------------------------------


//todo: without initialization collection
You can declare private List<Issue> issues; without initializing it, but
using new ArrayList<>() is a defensive programming technique that ensures robustness,
especially in non-persistent scenarios.